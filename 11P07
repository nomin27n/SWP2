#include <Servo.h>

#define PIN_LED   9
#define PIN_TRIG  12
#define PIN_ECHO  13
#define PIN_SERVO 10

#define SND_VEL 346.0
#define INTERVAL 25
#define PULSE_DURATION 10
#define TIMEOUT 30000
#define SCALE (0.001 * 0.5 * SND_VEL)

#define _DIST_MIN 180.0   // mm 단위 → 18cm
#define _DIST_MAX 360.0   // mm 단위 → 36cm
#define _EMA_ALPHA 0.4    // 실험해서 조절 (0.3~0.7 추천)

#define _DUTY_MIN 500
#define _DUTY_MAX 2500

float dist_prev = _DIST_MIN;
float dist_ema = _DIST_MIN;
unsigned long last_sampling_time = 0;

Servo myservo;

void setup() {
  pinMode(PIN_LED, OUTPUT);
  pinMode(PIN_TRIG, OUTPUT);
  pinMode(PIN_ECHO, INPUT);
  digitalWrite(PIN_TRIG, LOW);
  myservo.attach(PIN_SERVO);
  Serial.begin(57600);
}

void loop() {
  if (millis() < last_sampling_time + INTERVAL) return;

  float dist_raw = USS_measure(PIN_TRIG, PIN_ECHO);
  float dist_filtered;

  // --- 범위 필터 ---
  if (dist_raw < _DIST_MIN || dist_raw > _DIST_MAX || dist_raw == 0.0) {
    dist_filtered = dist_prev; // 이전값 유지
    digitalWrite(PIN_LED, HIGH); // 범위 밖 → LED OFF
  } else {
    dist_filtered = dist_raw;
    digitalWrite(PIN_LED, LOW);  // 범위 안 → LED ON
  }

  // --- EMA 필터 ---
  dist_ema = _EMA_ALPHA * dist_filtered + (1 - _EMA_ALPHA) * dist_prev;
  dist_prev = dist_ema;

  // --- 거리 → 각도 선형 매핑 ---
  float servo;
  if (dist_ema <= _DIST_MIN) servo = 0;
  else if (dist_ema >= _DIST_MAX) servo = 180;
  else servo = map(dist_ema, _DIST_MIN, _DIST_MAX, 0, 180);

  // --- 서보 제어 ---
  int duty = map(servo, 0, 180, _DUTY_MIN, _DUTY_MAX);
  myservo.writeMicroseconds(duty);

  // --- 시리얼 출력 (플로터용) ---
  Serial.print("Min:"); Serial.print(_DIST_MIN);
  Serial.print(",dist:"); Serial.print(dist_raw);
  Serial.print(",ema:"); Serial.print(dist_ema);
  Serial.print(",servo:"); Serial.print(servo);
  Serial.print(",Max:"); Serial.print(_DIST_MAX);
  Serial.println("");

  last_sampling_time += INTERVAL;
}

float USS_measure(int TRIG, int ECHO) {
  digitalWrite(TRIG, HIGH);
  delayMicroseconds(PULSE_DURATION);
  digitalWrite(TRIG, LOW);
  return pulseIn(ECHO, HIGH, TIMEOUT) * SCALE; // mm
}
